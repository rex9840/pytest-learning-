...>    __new__.__defaults__ to create Task objects without having to specify all the
    fields. 

    The test_defaults() test is there to demonstrate and validate how the defaults work.

    The test_member_access() test is to demonstrate how to access members by name and not by
    index, which is one of the main reasons to use namedtuples.



...>    The part of pytest execution where pytest goes off and finds which tests to run is called test
    discovery. pytest was able to find all the tests we wanted it to run because we named them(7)
    according to the pytest naming conventions. Here’s a brief overview of the naming conventions
    to keep your test code discoverable by pytest:
    Test files should be named test_<something>.py or <something>_test.py.
    Test methods and functions should be named test_<something>.
    Test classes should be named Test<Something>.
    Since our test files and functions start with test_, we’re good. There are ways to alter these
    discovery rules if you have a bunch of tests named differently.


...> Here are the possible outcomes of a test function:
PASSED (.): The test ran successfully.
FAILED (F): The test did not run successfully (or XPASS + strict).
SKIPPED (s): The test was skipped. You can tell pytest to skip a test by using either the
@pytest.mark.skip() or pytest.mark.skipif() decorators, discussed in ​Skipping Tests​.
xfail (x): The test was not supposed to pass, ran, and failed. You can tell pytest that a test
is expected to fail by using the @pytest.mark.xfail() decorator, discussed in ​Marking Tests
as Expecting to Fail​.
XPASS (X): The test was not supposed to pass, ran, and passed.
ERROR (E): An exception happened outside of the test function, in either a fixture


